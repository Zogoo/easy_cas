/*
 * This file is generated by jOOQ.
 */
package com.cas.easycas.dao.tables;


import com.cas.easycas.dao.Indexes;
import com.cas.easycas.dao.Keys;
import com.cas.easycas.dao.Public;
import com.cas.easycas.dao.tables.records.ClientCertificateRuleRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ClientCertificateRule extends TableImpl<ClientCertificateRuleRecord> {

    private static final long serialVersionUID = -1711524249;

    /**
     * The reference instance of <code>public.client_certificate_rule</code>
     */
    public static final ClientCertificateRule CLIENT_CERTIFICATE_RULE = new ClientCertificateRule();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ClientCertificateRuleRecord> getRecordType() {
        return ClientCertificateRuleRecord.class;
    }

    /**
     * The column <code>public.client_certificate_rule.id</code>.
     */
    public final TableField<ClientCertificateRuleRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('client_certificate_rule_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.client_certificate_rule.chain_id</code>.
     */
    public final TableField<ClientCertificateRuleRecord, Long> CHAIN_ID = createField("chain_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.client_certificate_rule.root_certificate_id</code>.
     */
    public final TableField<ClientCertificateRuleRecord, Long> ROOT_CERTIFICATE_ID = createField("root_certificate_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.client_certificate_rule.created_at</code>.
     */
    public final TableField<ClientCertificateRuleRecord, Timestamp> CREATED_AT = createField("created_at", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>public.client_certificate_rule.updated_at</code>.
     */
    public final TableField<ClientCertificateRuleRecord, Timestamp> UPDATED_AT = createField("updated_at", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * Create a <code>public.client_certificate_rule</code> table reference
     */
    public ClientCertificateRule() {
        this(DSL.name("client_certificate_rule"), null);
    }

    /**
     * Create an aliased <code>public.client_certificate_rule</code> table reference
     */
    public ClientCertificateRule(String alias) {
        this(DSL.name(alias), CLIENT_CERTIFICATE_RULE);
    }

    /**
     * Create an aliased <code>public.client_certificate_rule</code> table reference
     */
    public ClientCertificateRule(Name alias) {
        this(alias, CLIENT_CERTIFICATE_RULE);
    }

    private ClientCertificateRule(Name alias, Table<ClientCertificateRuleRecord> aliased) {
        this(alias, aliased, null);
    }

    private ClientCertificateRule(Name alias, Table<ClientCertificateRuleRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> ClientCertificateRule(Table<O> child, ForeignKey<O, ClientCertificateRuleRecord> key) {
        super(child, key, CLIENT_CERTIFICATE_RULE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CLIENT_CERTIFICATE_RULE_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ClientCertificateRuleRecord, Integer> getIdentity() {
        return Keys.IDENTITY_CLIENT_CERTIFICATE_RULE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ClientCertificateRuleRecord> getPrimaryKey() {
        return Keys.CLIENT_CERTIFICATE_RULE_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ClientCertificateRuleRecord>> getKeys() {
        return Arrays.<UniqueKey<ClientCertificateRuleRecord>>asList(Keys.CLIENT_CERTIFICATE_RULE_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<ClientCertificateRuleRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ClientCertificateRuleRecord, ?>>asList(Keys.CLIENT_CERTIFICATE_RULE__CLIENT_CERTIFICATE_RULE_CHAIN_ID_FKEY, Keys.CLIENT_CERTIFICATE_RULE__CLIENT_CERTIFICATE_RULE_ROOT_CERTIFICATE_ID_FKEY);
    }

    public AuthChain authChain() {
        return new AuthChain(this, Keys.CLIENT_CERTIFICATE_RULE__CLIENT_CERTIFICATE_RULE_CHAIN_ID_FKEY);
    }

    public RootCertificate rootCertificate() {
        return new RootCertificate(this, Keys.CLIENT_CERTIFICATE_RULE__CLIENT_CERTIFICATE_RULE_ROOT_CERTIFICATE_ID_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ClientCertificateRule as(String alias) {
        return new ClientCertificateRule(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ClientCertificateRule as(Name alias) {
        return new ClientCertificateRule(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ClientCertificateRule rename(String name) {
        return new ClientCertificateRule(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ClientCertificateRule rename(Name name) {
        return new ClientCertificateRule(name, null);
    }
}
