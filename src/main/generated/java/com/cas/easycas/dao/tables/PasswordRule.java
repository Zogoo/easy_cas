/*
 * This file is generated by jOOQ.
 */
package com.cas.easycas.dao.tables;


import com.cas.easycas.dao.Indexes;
import com.cas.easycas.dao.Keys;
import com.cas.easycas.dao.Public;
import com.cas.easycas.dao.tables.records.PasswordRuleRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PasswordRule extends TableImpl<PasswordRuleRecord> {

    private static final long serialVersionUID = 1750655296;

    /**
     * The reference instance of <code>public.password_rule</code>
     */
    public static final PasswordRule PASSWORD_RULE = new PasswordRule();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PasswordRuleRecord> getRecordType() {
        return PasswordRuleRecord.class;
    }

    /**
     * The column <code>public.password_rule.id</code>.
     */
    public final TableField<PasswordRuleRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('password_rule_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.password_rule.chain_id</code>.
     */
    public final TableField<PasswordRuleRecord, Long> CHAIN_ID = createField("chain_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.password_rule.auth_info_id</code>.
     */
    public final TableField<PasswordRuleRecord, Long> AUTH_INFO_ID = createField("auth_info_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.password_rule.allowed_retry_count</code>.
     */
    public final TableField<PasswordRuleRecord, Integer> ALLOWED_RETRY_COUNT = createField("allowed_retry_count", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.password_rule.failed_attempts</code>.
     */
    public final TableField<PasswordRuleRecord, Integer> FAILED_ATTEMPTS = createField("failed_attempts", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.password_rule.sign_in_count</code>.
     */
    public final TableField<PasswordRuleRecord, Integer> SIGN_IN_COUNT = createField("sign_in_count", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.password_rule.password_salt</code>.
     */
    public final TableField<PasswordRuleRecord, String> PASSWORD_SALT = createField("password_salt", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.password_rule.email</code>.
     */
    public final TableField<PasswordRuleRecord, String> EMAIL = createField("email", org.jooq.impl.SQLDataType.VARCHAR.nullable(false).defaultValue(org.jooq.impl.DSL.field("''::character varying", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.password_rule.encrypted_password</code>.
     */
    public final TableField<PasswordRuleRecord, String> ENCRYPTED_PASSWORD = createField("encrypted_password", org.jooq.impl.SQLDataType.VARCHAR.nullable(false).defaultValue(org.jooq.impl.DSL.field("''::character varying", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.password_rule.confirmation_token</code>.
     */
    public final TableField<PasswordRuleRecord, String> CONFIRMATION_TOKEN = createField("confirmation_token", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.password_rule.confirmed_at</code>.
     */
    public final TableField<PasswordRuleRecord, Timestamp> CONFIRMED_AT = createField("confirmed_at", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>public.password_rule.confirmation_sent_at</code>.
     */
    public final TableField<PasswordRuleRecord, Timestamp> CONFIRMATION_SENT_AT = createField("confirmation_sent_at", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>public.password_rule.created_at</code>.
     */
    public final TableField<PasswordRuleRecord, Timestamp> CREATED_AT = createField("created_at", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>public.password_rule.updated_at</code>.
     */
    public final TableField<PasswordRuleRecord, Timestamp> UPDATED_AT = createField("updated_at", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * Create a <code>public.password_rule</code> table reference
     */
    public PasswordRule() {
        this(DSL.name("password_rule"), null);
    }

    /**
     * Create an aliased <code>public.password_rule</code> table reference
     */
    public PasswordRule(String alias) {
        this(DSL.name(alias), PASSWORD_RULE);
    }

    /**
     * Create an aliased <code>public.password_rule</code> table reference
     */
    public PasswordRule(Name alias) {
        this(alias, PASSWORD_RULE);
    }

    private PasswordRule(Name alias, Table<PasswordRuleRecord> aliased) {
        this(alias, aliased, null);
    }

    private PasswordRule(Name alias, Table<PasswordRuleRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> PasswordRule(Table<O> child, ForeignKey<O, PasswordRuleRecord> key) {
        super(child, key, PASSWORD_RULE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PASSWORD_RULE_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<PasswordRuleRecord, Long> getIdentity() {
        return Keys.IDENTITY_PASSWORD_RULE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<PasswordRuleRecord> getPrimaryKey() {
        return Keys.PASSWORD_RULE_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<PasswordRuleRecord>> getKeys() {
        return Arrays.<UniqueKey<PasswordRuleRecord>>asList(Keys.PASSWORD_RULE_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<PasswordRuleRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<PasswordRuleRecord, ?>>asList(Keys.PASSWORD_RULE__PASSWORD_RULE_CHAIN_ID_FKEY, Keys.PASSWORD_RULE__PASSWORD_RULE_AUTH_INFO_ID_FKEY);
    }

    public AuthChain authChain() {
        return new AuthChain(this, Keys.PASSWORD_RULE__PASSWORD_RULE_CHAIN_ID_FKEY);
    }

    public AuthInfo authInfo() {
        return new AuthInfo(this, Keys.PASSWORD_RULE__PASSWORD_RULE_AUTH_INFO_ID_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PasswordRule as(String alias) {
        return new PasswordRule(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PasswordRule as(Name alias) {
        return new PasswordRule(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PasswordRule rename(String name) {
        return new PasswordRule(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PasswordRule rename(Name name) {
        return new PasswordRule(name, null);
    }
}
