/*
 * This file is generated by jOOQ.
 */
package com.cas.easycas.dao.tables;


import com.cas.easycas.dao.Indexes;
import com.cas.easycas.dao.Keys;
import com.cas.easycas.dao.Public;
import com.cas.easycas.dao.tables.records.OtpRuleRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OtpRule extends TableImpl<OtpRuleRecord> {

    private static final long serialVersionUID = 1784993519;

    /**
     * The reference instance of <code>public.otp_rule</code>
     */
    public static final OtpRule OTP_RULE = new OtpRule();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OtpRuleRecord> getRecordType() {
        return OtpRuleRecord.class;
    }

    /**
     * The column <code>public.otp_rule.id</code>.
     */
    public final TableField<OtpRuleRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('otp_rule_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.otp_rule.chain_id</code>.
     */
    public final TableField<OtpRuleRecord, Long> CHAIN_ID = createField("chain_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.otp_rule.allowed_retry_count</code>.
     */
    public final TableField<OtpRuleRecord, Integer> ALLOWED_RETRY_COUNT = createField("allowed_retry_count", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.otp_rule.created_at</code>.
     */
    public final TableField<OtpRuleRecord, Timestamp> CREATED_AT = createField("created_at", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>public.otp_rule.updated_at</code>.
     */
    public final TableField<OtpRuleRecord, Timestamp> UPDATED_AT = createField("updated_at", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * Create a <code>public.otp_rule</code> table reference
     */
    public OtpRule() {
        this(DSL.name("otp_rule"), null);
    }

    /**
     * Create an aliased <code>public.otp_rule</code> table reference
     */
    public OtpRule(String alias) {
        this(DSL.name(alias), OTP_RULE);
    }

    /**
     * Create an aliased <code>public.otp_rule</code> table reference
     */
    public OtpRule(Name alias) {
        this(alias, OTP_RULE);
    }

    private OtpRule(Name alias, Table<OtpRuleRecord> aliased) {
        this(alias, aliased, null);
    }

    private OtpRule(Name alias, Table<OtpRuleRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> OtpRule(Table<O> child, ForeignKey<O, OtpRuleRecord> key) {
        super(child, key, OTP_RULE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.OTP_RULE_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<OtpRuleRecord, Long> getIdentity() {
        return Keys.IDENTITY_OTP_RULE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<OtpRuleRecord> getPrimaryKey() {
        return Keys.OTP_RULE_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<OtpRuleRecord>> getKeys() {
        return Arrays.<UniqueKey<OtpRuleRecord>>asList(Keys.OTP_RULE_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<OtpRuleRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<OtpRuleRecord, ?>>asList(Keys.OTP_RULE__OTP_RULE_CHAIN_ID_FKEY);
    }

    public AuthChain authChain() {
        return new AuthChain(this, Keys.OTP_RULE__OTP_RULE_CHAIN_ID_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OtpRule as(String alias) {
        return new OtpRule(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OtpRule as(Name alias) {
        return new OtpRule(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public OtpRule rename(String name) {
        return new OtpRule(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public OtpRule rename(Name name) {
        return new OtpRule(name, null);
    }
}
