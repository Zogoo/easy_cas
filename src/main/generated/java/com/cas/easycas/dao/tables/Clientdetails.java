/*
 * This file is generated by jOOQ.
 */
package com.cas.easycas.dao.tables;


import com.cas.easycas.dao.Indexes;
import com.cas.easycas.dao.Keys;
import com.cas.easycas.dao.Public;
import com.cas.easycas.dao.tables.records.ClientdetailsRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Clientdetails extends TableImpl<ClientdetailsRecord> {

    private static final long serialVersionUID = 498025320;

    /**
     * The reference instance of <code>public.clientdetails</code>
     */
    public static final Clientdetails CLIENTDETAILS = new Clientdetails();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ClientdetailsRecord> getRecordType() {
        return ClientdetailsRecord.class;
    }

    /**
     * The column <code>public.clientdetails.appid</code>.
     */
    public final TableField<ClientdetailsRecord, String> APPID = createField("appid", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.clientdetails.resourceids</code>.
     */
    public final TableField<ClientdetailsRecord, String> RESOURCEIDS = createField("resourceids", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.clientdetails.appsecret</code>.
     */
    public final TableField<ClientdetailsRecord, String> APPSECRET = createField("appsecret", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.clientdetails.scope</code>.
     */
    public final TableField<ClientdetailsRecord, String> SCOPE = createField("scope", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.clientdetails.granttypes</code>.
     */
    public final TableField<ClientdetailsRecord, String> GRANTTYPES = createField("granttypes", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.clientdetails.redirecturl</code>.
     */
    public final TableField<ClientdetailsRecord, String> REDIRECTURL = createField("redirecturl", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.clientdetails.authorities</code>.
     */
    public final TableField<ClientdetailsRecord, String> AUTHORITIES = createField("authorities", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.clientdetails.access_token_validity</code>.
     */
    public final TableField<ClientdetailsRecord, Integer> ACCESS_TOKEN_VALIDITY = createField("access_token_validity", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.clientdetails.refresh_token_validity</code>.
     */
    public final TableField<ClientdetailsRecord, Integer> REFRESH_TOKEN_VALIDITY = createField("refresh_token_validity", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.clientdetails.additionalinformation</code>.
     */
    public final TableField<ClientdetailsRecord, String> ADDITIONALINFORMATION = createField("additionalinformation", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.clientdetails.autoapprovescopes</code>.
     */
    public final TableField<ClientdetailsRecord, String> AUTOAPPROVESCOPES = createField("autoapprovescopes", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * Create a <code>public.clientdetails</code> table reference
     */
    public Clientdetails() {
        this(DSL.name("clientdetails"), null);
    }

    /**
     * Create an aliased <code>public.clientdetails</code> table reference
     */
    public Clientdetails(String alias) {
        this(DSL.name(alias), CLIENTDETAILS);
    }

    /**
     * Create an aliased <code>public.clientdetails</code> table reference
     */
    public Clientdetails(Name alias) {
        this(alias, CLIENTDETAILS);
    }

    private Clientdetails(Name alias, Table<ClientdetailsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Clientdetails(Name alias, Table<ClientdetailsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Clientdetails(Table<O> child, ForeignKey<O, ClientdetailsRecord> key) {
        super(child, key, CLIENTDETAILS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CLIENTDETAILS_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ClientdetailsRecord> getPrimaryKey() {
        return Keys.CLIENTDETAILS_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ClientdetailsRecord>> getKeys() {
        return Arrays.<UniqueKey<ClientdetailsRecord>>asList(Keys.CLIENTDETAILS_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Clientdetails as(String alias) {
        return new Clientdetails(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Clientdetails as(Name alias) {
        return new Clientdetails(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Clientdetails rename(String name) {
        return new Clientdetails(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Clientdetails rename(Name name) {
        return new Clientdetails(name, null);
    }
}
